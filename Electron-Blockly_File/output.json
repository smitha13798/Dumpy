[
    {
        "scope": "Encoder",
        "attributes": [
            {
                "function": "member",
                "parameters": "int",
                "assigned": "latent_dim",
                "index": 18
            }
        ],
        "class_declaration": [
            {
                "function": "Declaration",
                "parameters": "@nn.compact",
                "assigned": 18
            }
        ],
        "functions": [
            {
                "functionName": "__call__",
                "parameters": "(self, x)",
                "functionCalls": [
                    {
                        "function": "Conv",
                        "parameters": "(features=32, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")(x)",
                        "assigned": "x",
                        "index": 24
                    },
                    {
                        "function": "Conv",
                        "parameters": "(features=32, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")",
                        "assigned": "x",
                        "index": 24
                    },
                    {
                        "function": "relu",
                        "parameters": "(x)",
                        "assigned": "x",
                        "index": 26
                    },
                    {
                        "function": "Conv",
                        "parameters": "(features=64, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")(x)",
                        "assigned": "x",
                        "index": 28
                    },
                    {
                        "function": "Conv",
                        "parameters": "(features=64, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")",
                        "assigned": "x",
                        "index": 28
                    },
                    {
                        "function": "relu",
                        "parameters": "(x)",
                        "assigned": "x",
                        "index": 30
                    },
                    {
                        "function": "reshape",
                        "parameters": "(x.shape[0], -1)",
                        "assigned": "x",
                        "index": 32
                    },
                    {
                        "function": "Dense",
                        "parameters": "(features=self.latent_dim)(x)",
                        "assigned": "x",
                        "index": 34
                    },
                    {
                        "function": "Dense",
                        "parameters": "(features=self.latent_dim)",
                        "assigned": "x",
                        "index": 34
                    }
                ],
                "scope": "Encoder",
                "row": "22",
                "returns": "x",
                "translate": true,
                "start_byte": 355,
                "end_byte": 704
            }
        ],
        "translate": true,
        "row_number": 18,
        "parameters": "",
        "base_classes": "(nn.Module)",
        "start_byte": 290,
        "end_byte": 704
    },
    {
        "scope": "Decoder",
        "attributes": [
            {
                "function": "member",
                "parameters": "int",
                "assigned": "latent_dim",
                "index": 46
            }
        ],
        "class_declaration": [
            {
                "function": "Declaration",
                "parameters": "@nn.compact",
                "assigned": 46
            }
        ],
        "functions": [
            {
                "functionName": "__call__",
                "parameters": "(self, z)",
                "functionCalls": [
                    {
                        "function": "Dense",
                        "parameters": "(features=7*7*64)(z)",
                        "assigned": "z",
                        "index": 52
                    },
                    {
                        "function": "Dense",
                        "parameters": "(features=7*7*64)",
                        "assigned": "z",
                        "index": 52
                    },
                    {
                        "function": "reshape",
                        "parameters": "(z.shape[0], 7, 7, 64)",
                        "assigned": "z",
                        "index": 54
                    },
                    {
                        "function": "ConvTranspose",
                        "parameters": "(features=32, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")(z)",
                        "assigned": "z",
                        "index": 56
                    },
                    {
                        "function": "ConvTranspose",
                        "parameters": "(features=32, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")",
                        "assigned": "z",
                        "index": 56
                    },
                    {
                        "function": "relu",
                        "parameters": "(z)",
                        "assigned": "z",
                        "index": 58
                    },
                    {
                        "function": "ConvTranspose",
                        "parameters": "(features=1, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")(z)",
                        "assigned": "z",
                        "index": 60
                    },
                    {
                        "function": "ConvTranspose",
                        "parameters": "(features=1, kernel_size=(3, 3), strides=(2, 2), padding=\"SAME\")",
                        "assigned": "z",
                        "index": 60
                    },
                    {
                        "function": "sigmoid",
                        "parameters": "(z)",
                        "assigned": "z",
                        "index": 62
                    }
                ],
                "scope": "Decoder",
                "row": "50",
                "returns": "z",
                "translate": true,
                "start_byte": 797,
                "end_byte": 1163
            }
        ],
        "translate": true,
        "row_number": 46,
        "parameters": "",
        "base_classes": "(nn.Module)",
        "start_byte": 732,
        "end_byte": 1163
    },
    {
        "scope": "Autoencoder",
        "attributes": [
            {
                "function": "member",
                "parameters": "int",
                "assigned": "latent_dim",
                "index": 73
            }
        ],
        "class_declaration": [],
        "functions": [
            {
                "functionName": "setup",
                "parameters": "(self)",
                "functionCalls": [
                    {
                        "function": "Variable",
                        "parameters": "Encoder(latent_dim=self.latent_dim)",
                        "assigned": "self.encoder",
                        "index": 78
                    },
                    {
                        "function": "Variable",
                        "parameters": "Decoder(latent_dim=self.latent_dim)",
                        "assigned": "self.decoder",
                        "index": 79
                    }
                ],
                "scope": "Autoencoder",
                "row": "76",
                "returns": null,
                "translate": true,
                "start_byte": 1254,
                "end_byte": 1392
            },
            {
                "functionName": "__call__",
                "parameters": "(self, x)",
                "functionCalls": [
                    {
                        "function": "cheatblock",
                        "parameters": "latent = self.encoder(x)",
                        "assigned": "latent",
                        "index": 82
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "reconstruction = self.decoder(latent)",
                        "assigned": "reconstruction",
                        "index": 83
                    }
                ],
                "scope": "Autoencoder",
                "row": "80",
                "returns": "reconstruction",
                "translate": true,
                "start_byte": 1395,
                "end_byte": 1528
            }
        ],
        "translate": true,
        "row_number": 73,
        "parameters": "",
        "base_classes": "(nn.Module)",
        "start_byte": 1194,
        "end_byte": 1528
    },
    {
        "scope": "global",
        "functions": [
            {
                "functionName": "create_train_state",
                "parameters": "(rng, learning_rate, latent_dim, input_shape)",
                "functionCalls": [
                    {
                        "function": "Variable",
                        "parameters": "Autoencoder(latent_dim=latent_dim)",
                        "assigned": "model",
                        "index": 90
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "model.init(rng, jnp.ones(input_shape))[\"params\"]",
                        "assigned": "params",
                        "index": 91
                    },
                    {
                        "function": "ones",
                        "parameters": "(input_shape)",
                        "assigned": "params",
                        "index": 91
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "tx = optax.adam(learning_rate)",
                        "assigned": "tx",
                        "index": 92
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "tx = optax.adam(learning_rate)",
                        "assigned": "tx",
                        "index": 92
                    }
                ],
                "scope": "global",
                "row": "89",
                "returns": "train_state.TrainState.create(apply_fn=model.apply, params=params, tx=tx)",
                "translate": false,
                "start_byte": 1546,
                "end_byte": 1843
            },
            {
                "functionName": "compute_loss",
                "parameters": "(pred, target)",
                "functionCalls": [
                    {
                        "function": "kaiming_normal",
                        "parameters": "(5)",
                        "assigned": "x",
                        "index": 98
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "loss = jnp.mean((pred - target) ** 2)",
                        "assigned": "loss",
                        "index": 100
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "jnp.mean((pred - target) ** 2)",
                        "assigned": "",
                        "index": 101
                    }
                ],
                "scope": "global",
                "row": "96",
                "returns": "loss",
                "translate": true,
                "start_byte": 1860,
                "end_byte": 2037
            },
            {
                "functionName": "train_step",
                "parameters": "(state, batch)",
                "functionCalls": [
                    {
                        "function": "cheatblock",
                        "parameters": "grads, _ = jax.grad(loss_fn, has_aux=True)(state.params, state.apply_fn, batch)",
                        "assigned": "grads, _",
                        "index": 110
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "jax.grad(loss_fn, has_aux=True)(state.params, state.apply_fn, batch)",
                        "assigned": "grads, _",
                        "index": 110
                    }
                ],
                "scope": "global",
                "row": "108",
                "returns": "state.apply_gradients(grads=grads)",
                "translate": true,
                "start_byte": 2077,
                "end_byte": 2242
            },
            {
                "functionName": "loss_fn",
                "parameters": "(params, apply_fn, batch)",
                "functionCalls": [
                    {
                        "function": "Variable",
                        "parameters": "apply_fn({\"params\": params}, batch)",
                        "assigned": "pred",
                        "index": 118
                    },
                    {
                        "function": "Variable",
                        "parameters": "compute_loss(pred, batch)",
                        "assigned": "loss",
                        "index": 119
                    }
                ],
                "scope": "global",
                "row": "116",
                "returns": "loss, pred",
                "translate": true,
                "start_byte": 2268,
                "end_byte": 2417
            },
            {
                "functionName": "eval_step",
                "parameters": "(state, batch)",
                "functionCalls": [],
                "scope": "global",
                "row": "128",
                "returns": "state.apply_fn({\"params\": state.params}, batch)",
                "translate": true,
                "start_byte": 2464,
                "end_byte": 2557
            },
            {
                "functionName": "load_data",
                "parameters": "()",
                "functionCalls": [
                    {
                        "function": "cheatblock",
                        "parameters": "transform = transforms.Compose([transforms.ToTensor()])",
                        "assigned": "transform",
                        "index": 137
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "[transforms.ToTensor()]",
                        "assigned": "transform",
                        "index": 137
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)",
                        "assigned": "train_dataset",
                        "index": 138
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)",
                        "assigned": "train_dataset",
                        "index": 138
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "test_dataset = datasets.MNIST(root='./data', train=False, transform=transform, download=True)",
                        "assigned": "test_dataset",
                        "index": 139
                    },
                    {
                        "function": "Variable",
                        "parameters": "DataLoader(train_dataset, batch_size=64, shuffle=True)",
                        "assigned": "train_loader",
                        "index": 141
                    },
                    {
                        "function": "Variable",
                        "parameters": "DataLoader(test_dataset, batch_size=64, shuffle=False)",
                        "assigned": "test_loader",
                        "index": 142
                    },
                    {
                        "function": "Variable",
                        "parameters": "load_data()",
                        "assigned": "train_loader, test_loader",
                        "index": 145
                    }
                ],
                "scope": "global",
                "row": "136",
                "returns": "train_loader, test_loader",
                "translate": false,
                "start_byte": 2585,
                "end_byte": 3042
            },
            {
                "functionName": "train_autoencoder",
                "parameters": "(latent_dim=64, num_epochs=1, learning_rate=1e-3)",
                "functionCalls": [
                    {
                        "function": "cheatblock",
                        "parameters": "rng = random.PRNGKey(0)",
                        "assigned": "rng",
                        "index": 149
                    },
                    {
                        "function": "Variable",
                        "parameters": "create_train_state(rng, learning_rate, latent_dim, (1, 28, 28, 1))",
                        "assigned": "state",
                        "index": 150
                    },
                    {
                        "function": "python_loop",
                        "parameters": "range(num_epochs)",
                        "assigned": "epoch",
                        "index": 152,
                        "functionCallsLoop": [
                            {
                                "function": "cheatblock",
                                "parameters": "for epoch in range(num_epochs):\n        for batch in train_loader:\n            images, _ = batch\n            images = jnp.array(images.numpy())\n            images = images.reshape(-1, 28, 28, 1)\n\n            # Training step\n            state = train_step(state, images)\n\n        print(f'Epoch {epoch+1}/{num_epochs} completed.')",
                                "assigned": "",
                                "index": 152
                            }
                        ]
                    },
                    {
                        "function": "python_loop",
                        "parameters": "train_loader",
                        "assigned": "batch",
                        "index": 153,
                        "functionCallsLoop": [
                            {
                                "function": "cheatblock",
                                "parameters": "images = jnp.array(images.numpy())",
                                "assigned": "images",
                                "index": 155
                            },
                            {
                                "function": "cheatblock",
                                "parameters": "(images.numpy())",
                                "assigned": "images",
                                "index": 155
                            },
                            {
                                "function": "reshape",
                                "parameters": "(-1, 28, 28, 1)",
                                "assigned": "images",
                                "index": 156
                            },
                            {
                                "function": "Variable",
                                "parameters": "train_step(state, images)",
                                "assigned": "state",
                                "index": 159
                            }
                        ]
                    },
                    {
                        "function": "Variable",
                        "parameters": "train_autoencoder()",
                        "assigned": "state",
                        "index": 166
                    }
                ],
                "scope": "global",
                "row": "148",
                "returns": "state",
                "translate": false,
                "start_byte": 3086,
                "end_byte": 3641
            },
            {
                "functionName": "show_images",
                "parameters": "(original, reconstructed)",
                "functionCalls": [
                    {
                        "function": "cheatblock",
                        "parameters": "fig, axes = plt.subplots(1, 2)",
                        "assigned": "fig, axes",
                        "index": 170
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "axes[0].imshow(original.squeeze(), cmap='gray')",
                        "assigned": "",
                        "index": 171
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "(original.squeeze(), cmap='gray')",
                        "assigned": "",
                        "index": 171
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "(original.squeeze(), cmap='gray')",
                        "assigned": "",
                        "index": 171
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "axes[0].set_title('Original')",
                        "assigned": "",
                        "index": 172
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "axes[1].imshow(reconstructed.squeeze(), cmap='gray')",
                        "assigned": "",
                        "index": 173
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "(reconstructed.squeeze(), cmap='gray')",
                        "assigned": "",
                        "index": 173
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "axes[1].set_title('Reconstructed')",
                        "assigned": "",
                        "index": 174
                    },
                    {
                        "function": "cheatblock",
                        "parameters": "plt.show()",
                        "assigned": "",
                        "index": 175
                    }
                ],
                "scope": "global",
                "row": "169",
                "returns": null,
                "translate": false,
                "start_byte": 3721,
                "end_byte": 3994
            },
            {
                "functionName": "evaluate_autoencoder",
                "parameters": "(state)",
                "functionCalls": [
                    {
                        "function": "python_loop",
                        "parameters": "test_loader",
                        "assigned": "batch",
                        "index": 178,
                        "functionCallsLoop": [
                            {
                                "function": "cheatblock",
                                "parameters": "images = jnp.array(images.numpy())",
                                "assigned": "images",
                                "index": 180
                            },
                            {
                                "function": "cheatblock",
                                "parameters": "(images.numpy())",
                                "assigned": "images",
                                "index": 180
                            },
                            {
                                "function": "reshape",
                                "parameters": "(-1, 28, 28, 1)",
                                "assigned": "images",
                                "index": 181
                            },
                            {
                                "function": "Variable",
                                "parameters": "eval_step(state, images)",
                                "assigned": "reconstructed_images",
                                "index": 184
                            },
                            {
                                "function": "cheatblock",
                                "parameters": "reconstructed_images = eval_step(state, images)",
                                "assigned": "reconstructed_images",
                                "index": 184
                            }
                        ]
                    }
                ],
                "scope": "global",
                "row": "177",
                "returns": null,
                "translate": false,
                "start_byte": 3996,
                "end_byte": 4398
            }
        ],
        "translate": false
    }
]